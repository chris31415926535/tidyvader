// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// strlen
int strlen(CharacterVector text);
RcppExport SEXP _tidyvader_strlen(SEXP textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type text(textSEXP);
    rcpp_result_gen = Rcpp::wrap(strlen(text));
    return rcpp_result_gen;
END_RCPP
}
// remove_punc
CharacterVector remove_punc(CharacterVector text);
RcppExport SEXP _tidyvader_remove_punc(SEXP textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type text(textSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_punc(text));
    return rcpp_result_gen;
END_RCPP
}
// remove_punc_around
CharacterVector remove_punc_around(CharacterVector text);
RcppExport SEXP _tidyvader_remove_punc_around(SEXP textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type text(textSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_punc_around(text));
    return rcpp_result_gen;
END_RCPP
}
// replace_text
std::string replace_text(std::string str, std::string pattern, std::string replacement);
RcppExport SEXP _tidyvader_replace_text(SEXP strSEXP, SEXP patternSEXP, SEXP replacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string >::type replacement(replacementSEXP);
    rcpp_result_gen = Rcpp::wrap(replace_text(str, pattern, replacement));
    return rcpp_result_gen;
END_RCPP
}
// str_split_space
CharacterVector str_split_space(std::string text);
RcppExport SEXP _tidyvader_str_split_space(SEXP textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text(textSEXP);
    rcpp_result_gen = Rcpp::wrap(str_split_space(text));
    return rcpp_result_gen;
END_RCPP
}
// cpp_str_sort
std::vector< std::string > cpp_str_sort(std::vector< std::string > strings);
RcppExport SEXP _tidyvader_cpp_str_sort(SEXP stringsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type strings(stringsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_str_sort(strings));
    return rcpp_result_gen;
END_RCPP
}
// char_count
int char_count(std::string text, std::string to_count);
RcppExport SEXP _tidyvader_char_count(SEXP textSEXP, SEXP to_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text(textSEXP);
    Rcpp::traits::input_parameter< std::string >::type to_count(to_countSEXP);
    rcpp_result_gen = Rcpp::wrap(char_count(text, to_count));
    return rcpp_result_gen;
END_RCPP
}
// vaderC
NumericVector vaderC(NumericVector word_scores, NumericVector word_negations, NumericVector word_boosters, LogicalVector word_caps, int first_but);
RcppExport SEXP _tidyvader_vaderC(SEXP word_scoresSEXP, SEXP word_negationsSEXP, SEXP word_boostersSEXP, SEXP word_capsSEXP, SEXP first_butSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type word_scores(word_scoresSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type word_negations(word_negationsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type word_boosters(word_boostersSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type word_caps(word_capsSEXP);
    Rcpp::traits::input_parameter< int >::type first_but(first_butSEXP);
    rcpp_result_gen = Rcpp::wrap(vaderC(word_scores, word_negations, word_boosters, word_caps, first_but));
    return rcpp_result_gen;
END_RCPP
}
// get_index2
IntegerVector get_index2(CharacterVector text, CharacterVector sorted_dictionary);
RcppExport SEXP _tidyvader_get_index2(SEXP textSEXP, SEXP sorted_dictionarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type text(textSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sorted_dictionary(sorted_dictionarySEXP);
    rcpp_result_gen = Rcpp::wrap(get_index2(text, sorted_dictionary));
    return rcpp_result_gen;
END_RCPP
}
// get_index3
NumericVector get_index3(CharacterVector text, CharacterVector sorted_dictionary);
RcppExport SEXP _tidyvader_get_index3(SEXP textSEXP, SEXP sorted_dictionarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type text(textSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type sorted_dictionary(sorted_dictionarySEXP);
    rcpp_result_gen = Rcpp::wrap(get_index3(text, sorted_dictionary));
    return rcpp_result_gen;
END_RCPP
}
// vadercpp
NumericVector vadercpp(std::string text, CharacterVector mod_bigrams, CharacterVector dict_sent_word, NumericVector dict_sent_value, CharacterVector dict_negate, CharacterVector dict_mod_word, NumericVector dict_mod_value, CharacterVector dict_punct_word, NumericVector dict_punct_value);
RcppExport SEXP _tidyvader_vadercpp(SEXP textSEXP, SEXP mod_bigramsSEXP, SEXP dict_sent_wordSEXP, SEXP dict_sent_valueSEXP, SEXP dict_negateSEXP, SEXP dict_mod_wordSEXP, SEXP dict_mod_valueSEXP, SEXP dict_punct_wordSEXP, SEXP dict_punct_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type text(textSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type mod_bigrams(mod_bigramsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_sent_word(dict_sent_wordSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dict_sent_value(dict_sent_valueSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_negate(dict_negateSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_mod_word(dict_mod_wordSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dict_mod_value(dict_mod_valueSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_punct_word(dict_punct_wordSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dict_punct_value(dict_punct_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(vadercpp(text, mod_bigrams, dict_sent_word, dict_sent_value, dict_negate, dict_mod_word, dict_mod_value, dict_punct_word, dict_punct_value));
    return rcpp_result_gen;
END_RCPP
}
// vaderdf
DataFrame vaderdf(CharacterVector text_vec, CharacterVector mod_bigrams, CharacterVector dict_sent_word, NumericVector dict_sent_value, CharacterVector dict_negate, CharacterVector dict_mod_word, NumericVector dict_mod_value, CharacterVector dict_punct_word, NumericVector dict_punct_value);
RcppExport SEXP _tidyvader_vaderdf(SEXP text_vecSEXP, SEXP mod_bigramsSEXP, SEXP dict_sent_wordSEXP, SEXP dict_sent_valueSEXP, SEXP dict_negateSEXP, SEXP dict_mod_wordSEXP, SEXP dict_mod_valueSEXP, SEXP dict_punct_wordSEXP, SEXP dict_punct_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type text_vec(text_vecSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type mod_bigrams(mod_bigramsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_sent_word(dict_sent_wordSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dict_sent_value(dict_sent_valueSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_negate(dict_negateSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_mod_word(dict_mod_wordSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dict_mod_value(dict_mod_valueSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type dict_punct_word(dict_punct_wordSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dict_punct_value(dict_punct_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(vaderdf(text_vec, mod_bigrams, dict_sent_word, dict_sent_value, dict_negate, dict_mod_word, dict_mod_value, dict_punct_word, dict_punct_value));
    return rcpp_result_gen;
END_RCPP
}
